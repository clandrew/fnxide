[ASSIGNMENT]
                LDA #{2}
                STA {1}

[GOTO]
                JML {1}

[COPY]
                .as
                ; copy template
                ; Source Address {1}
                ; Destination Address {2}
                ; Length {3}
                LDA #`{1}
                STA @l SDMA_SRC_ADDY_H
                LDA #`{2}-$B0_0000   ; offset by $B0 for video RAM
                STA @l VDMA_DST_ADDY_H
                LDA #`{3}
                STA @l SDMA_SIZE_H
                STA @l VDMA_SIZE_H
                setal
                LDA #<>{1}
                STA @l SDMA_SRC_ADDY_L
                LDA #<>{2}-$B0_0000   ; offset by $B0 for video RAM
                STA @l VDMA_DST_ADDY_L
                LDA #<>{3}
                STA @l SDMA_SIZE_L
                STA @l VDMA_SIZE_L
                setas

                ; Write size of transfer to local register
                JSL COPY_TO_VRAM

[SCOPY]
                .as
                ; copy template
                ; Source Address {1}
                ; Destination Address {2}
                ; Length {3}
                LDA #`{1}
                STA @l SDMA_SRC_ADDY_H
                LDA #`{2}
                STA @l SDMA_DST_ADDY_H
                LDA #`{3}
                STA @l SDMA_SIZE_H
                setal
                LDA #<>{1}
                STA @l SDMA_SRC_ADDY_L
                LDA #<>{2}
                STA @l SDMA_DST_ADDY_L
                LDA #<>{3}
                STA @l SDMA_SIZE_L
                setas

                ; Write size of transfer to local register
                JSL COPY_TO_SRAM

[FILL]
                .as
                ; FILL template
                ; Address {1}
                ; Length {2}
                ; Byte {3}
                LDA #`{1}-$B0_0000   ; offset by $B0 for video RAM
                STA @l VDMA_DST_ADDY_H
                LDA #`{2}
                STA @l VDMA_SIZE_H
                LDA #{3}
                STA VDMA_BYTE_2_WRITE

                setal
                LDA #<>{1}-$B0_0000   ; offset by $B0 for video RAM
                STA @l VDMA_DST_ADDY_L
                LDA #<>{2}
                STA @l VDMA_SIZE_L
                setas

                ; Write size of transfer to local register
                JSL FILL_VRAM

[VGM_INIT]
                ; VGM_INIT template
                ; Address {1}
                JSL VGM_INIT_TIMERS
                ; load the game over music
                LDA #`{1}
                STA CURRENT_POSITION + 2
                STA SONG_START + 2
                setal
                LDA #<>{1}
                STA SONG_START
                setas
                JSL VGM_SET_SONG_POINTERS

[VGM_PLAY]
                ; VGM_PLAY template
                JSL VGM_WRITE_REGISTER

[ENABLE_INTERRUPTS]
                ; enable interrupts template
                ; Reg0 {1}
                ; Reg1 {2}
                ; Reg2 {3}
                ; Reg3 {4}
                LDA #~({1})
                STA @l INT_MASK_REG0
                LDA #~({2})
                STA @l INT_MASK_REG1
                LDA #~({3})
                STA @l INT_MASK_REG2
                LDA #~({4})
                STA @l INT_MASK_REG3
                CLI

[ENABLE_SPRITE]
                ; enable sprite template
                ; sprite #{1}
                ; LUT {2}
                ; depth {3}
                ; address {4}
                LDA #1+{2}*2+{3}*$10
                STA SP00_CONTROL_REG + 8*{1}
                LDA #`{4}-$B0_0000
                STA SP00_ADDY_PTR_H + 8*{1}
                setal
                LDA #<>{4}-$B0_0000
                STA SP00_ADDY_PTR_L + 8*{1}
                setas

[DISABLE_SPRITE]
                ; disable sprite template
                ; sprite #{1}
                LDA #0
                STA SP00_CONTROL_REG + 8*{1}

[SET_SPRITE_POS]
                ; set sprite position template
                ; sprite #{1}
                ; x {2}
                ; y {3}
                setal
                LDA #{2}
                STA SP00_X_POS_L + 8*{1}
                LDA #{3}
                STA SP00_Y_POS_L + 8*{1}
                setas

[ENABLE_BITMAP]
                ; enable bitmap template 
                ; bitmap #{1}
                ; LUT {2}
                ; address {3}
                LDA #1+{2}*2
                STA BM0_CONTROL_REG + 8*{1}
                LDA #`{3}-$B0_0000
                STA BM0_START_ADDY_H + 8*{1}
                setal
                LDA #<>{3}-$B0_0000
                STA BM0_START_ADDY_L + 8*{1}
                setas

[DISABLE_BITMAP]
                ; disable bitmap template 
                ; bitmap #{1}
                LDA BM0_CONTROL_REG + 8*{1}
                AND #$FE
                STA BM0_CONTROL_REG + 8*{1}

[ENABLE_TILEMAP]
                ; enable tilemap template
                ; tilemap #{1}
                ; address {2}
                ; width {3}
                ; height {4}
                LDA #1
                STA TL0_CONTROL_REG + 12*{1}
                LDA #`{2}-$B0_0000
                STA TL0_START_ADDY_H + 12*{1}
                setal
                LDA #<>{2}-$B0_0000
                STA TL0_START_ADDY_L + 12*{1}
                LDA #{3}
                AND #$3FF  ; only take 10 bis
                STA TL0_TOTAL_X_SIZE_L + 12*{1}
                LDA #{4}
                AND #$3FF  ; only take 10 bis
                STA TL0_TOTAL_Y_SIZE_L + 12*{1}
                setas

[DISABLE_TILEMAP]
                ; disable tilemap
                ; tilemap #{1}
                LDA #0
                STA TL0_CONTROL_REG + 12*{1}

[SET_TILEMAP_POS]
                ; set tilemap position template
                ; tilemap #{1}
                ; x {2}
                ; y {3}
                setal
                LDA #{2}
                STA TL0_WINDOW_X_POS_L + {1}*12
                LDA #{3}
                STA TL0_WINDOW_Y_POS_L + {1}*12
                setas

[INCR]
                ; INCR template
                ; address {1}
                LDA @l {1}
                INC A
                STA @l {1}

[DECR]
                ; DECR template
                ; address {1}
                LDA @l {1}
                DEC A
                STA @l {1}

[VAR]
                ; VAR template
                ; name {1}
                ; value {2}
                {1} .byte {2}